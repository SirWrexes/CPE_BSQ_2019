        -:    0:Source:tests/list/test_list_addnode.c
        -:    0:Graph:/home/renard/repos/delivery/CPE_2019/CPE_BSQ_2019/lib/libfox/datastruct/test_list_addnode.gcno
        -:    0:Data:/home/renard/repos/delivery/CPE_2019/CPE_BSQ_2019/lib/libfox/datastruct/test_list_addnode.gcda
        -:    0:Runs:35
        -:    1:/*
        -:    2:** EPITECH PROJECT, 2019
        -:    3:** Libfox
        -:    4:** File description:
        -:    5:** UT: Adding a node to a list
        -:    6:*/
        -:    7:
        -:    8:#include <criterion/criterion.h>
        -:    9:#include <criterion/redirect.h>
        -:   10:#include "tests/wrap_malloc.h"
        -:   11:
        -:   12:#include "datastruct/fox_list.h"
        -:   13:
        2:   14:Test(list_addnode, regular_usage)
        -:   15:{
        1:   16:    foxlist_t list = NULL;
        1:   17:    char *ref[] = {"ref0", "ref1"};
        -:   18:
       1*:   19:    cr_assert_not(list_create(&list));
       1*:   20:    cr_assert_not(list_addnode(list, ref[0]));
       1*:   21:    cr_assert_not_null(list->head);
       1*:   22:    cr_assert_not_null(list->tail);
       1*:   23:    cr_expect_eq(list->head, list->tail);
       1*:   24:    cr_expect_eq(list->head->data, ref[0]);
       1*:   25:    cr_expect_eq(list->nodes, 1);
       1*:   26:    cr_assert_not(list_addnode(list, ref[1]));
       1*:   27:    cr_expect_neq(list->head, list->tail);
       1*:   28:    cr_expect_eq(list->tail->data, ref[1]);
       1*:   29:    cr_expect_eq(list->nodes, 2);
        1:   30:}
------------------
list_addnode_regular_usage_impl:
function list_addnode_regular_usage_impl called 1 returned 100% blocks executed 30%
        1:   14:Test(list_addnode, regular_usage)
        -:   15:{
        1:   16:    foxlist_t list = NULL;
        1:   17:    char *ref[] = {"ref0", "ref1"};
        -:   18:
       1*:   19:    cr_assert_not(list_create(&list));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 taken 0 (fallthrough)
branch 16 taken 1
call   17 never executed
call   18 returned 1
       1*:   20:    cr_assert_not(list_addnode(list, ref[0]));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 taken 0 (fallthrough)
branch 16 taken 1
call   17 never executed
call   18 returned 1
       1*:   21:    cr_assert_not_null(list->head);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 taken 0 (fallthrough)
branch 15 taken 1
call   16 never executed
call   17 returned 1
       1*:   22:    cr_assert_not_null(list->tail);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 taken 0 (fallthrough)
branch 15 taken 1
call   16 never executed
call   17 returned 1
       1*:   23:    cr_expect_eq(list->head, list->tail);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 taken 0 (fallthrough)
branch 15 taken 1
call   16 never executed
call   17 returned 1
       1*:   24:    cr_expect_eq(list->head->data, ref[0]);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 taken 0 (fallthrough)
branch 15 taken 1
call   16 never executed
call   17 returned 1
       1*:   25:    cr_expect_eq(list->nodes, 1);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 taken 0 (fallthrough)
branch 15 taken 1
call   16 never executed
call   17 returned 1
       1*:   26:    cr_assert_not(list_addnode(list, ref[1]));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 taken 0 (fallthrough)
branch 16 taken 1
call   17 never executed
call   18 returned 1
       1*:   27:    cr_expect_neq(list->head, list->tail);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 taken 0 (fallthrough)
branch 15 taken 1
call   16 never executed
call   17 returned 1
       1*:   28:    cr_expect_eq(list->tail->data, ref[1]);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 taken 0 (fallthrough)
branch 15 taken 1
call   16 never executed
call   17 returned 1
       1*:   29:    cr_expect_eq(list->nodes, 2);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 taken 0 (fallthrough)
branch 15 taken 1
call   16 never executed
call   17 returned 1
        1:   30:}
------------------
list_addnode_regular_usage_jmp:
function list_addnode_regular_usage_jmp called 1 returned 100% blocks executed 100%
        1:   14:Test(list_addnode, regular_usage)
call    0 returned 1
call    1 returned 1
call    2 returned 1
------------------
        -:   31:
        2:   32:Test(list_addnode, broken_malloc, .fini = fix_malloc)
        -:   33:{
        1:   34:    foxlist_t list = NULL;
        -:   35:
        1:   36:    malloc_counter = 1;
       1*:   37:    cr_assert_not(list_create(&list));
       1*:   38:    cr_assert(list_addnode(list, &list));
       1*:   39:    cr_expect_null(list->head);
       1*:   40:    cr_expect_null(list->tail);
       1*:   41:    cr_expect_eq(list->nodes, 0);
        1:   42:}
------------------
list_addnode_broken_malloc_impl:
function list_addnode_broken_malloc_impl called 1 returned 100% blocks executed 32%
        1:   32:Test(list_addnode, broken_malloc, .fini = fix_malloc)
        -:   33:{
        1:   34:    foxlist_t list = NULL;
        -:   35:
        1:   36:    malloc_counter = 1;
       1*:   37:    cr_assert_not(list_create(&list));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 taken 0 (fallthrough)
branch 16 taken 1
call   17 never executed
call   18 returned 1
       1*:   38:    cr_assert(list_addnode(list, &list));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
branch  3 taken 0 (fallthrough)
branch  4 taken 1
call    5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
call   14 never executed
branch 15 taken 0 (fallthrough)
branch 16 taken 1
call   17 never executed
call   18 returned 1
       1*:   39:    cr_expect_null(list->head);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 taken 0 (fallthrough)
branch 15 taken 1
call   16 never executed
call   17 returned 1
       1*:   40:    cr_expect_null(list->tail);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 taken 0 (fallthrough)
branch 15 taken 1
call   16 never executed
call   17 returned 1
       1*:   41:    cr_expect_eq(list->nodes, 0);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
call    4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
call   10 never executed
call   11 never executed
call   12 never executed
call   13 never executed
branch 14 taken 0 (fallthrough)
branch 15 taken 1
call   16 never executed
call   17 returned 1
        1:   42:}
------------------
list_addnode_broken_malloc_jmp:
function list_addnode_broken_malloc_jmp called 1 returned 100% blocks executed 100%
        1:   32:Test(list_addnode, broken_malloc, .fini = fix_malloc)
call    0 returned 1
call    1 returned 1
call    2 returned 1
------------------
